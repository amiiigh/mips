NOP : 16'b0;

add :
	{4'b0001,3'b111,3'b010,3'b010,3'b000}
sub :
	{4'b0010,3'b111,3'b010,3'b010,3'b000}
	0
and :
	{4'b0011,3'b111,3'b001,3'b000,3'b000}
	0
or  :
	{4'b0100,3'b111,3'b001,3'b000,3'b000}
	1
XOR :
	{4'b0101,3'b111,3'b010,3'b010,3'b000}
	0
SL  :
	{4'b0110,3'b111,3'b010,3'b001,3'b000}
	4
SR  :
	{4'b0111,3'b111,3'b010,3'b001,3'b000}
	1
SRU :
	{4'b1000,3'b111,3'b010,3'b001,3'b000}
	1
store : 
 {4'b1011,3'b011,3'b010,6'b000000};
 load :
 {4'b1010,3'b111,3'b010,6'b000000};


 		8'd0:	instr <= {4'b0001,3'b000,3'b010,3'b010,3'b000};//add reg2 + reg2
		8'd1:	instr <= {4'b1001,3'b000,3'b110,6'b111101};//addi reg2 i3
		8'd2:	instr <= {4'b0011,3'b000,3'b001,3'b000,3'b000};//and reg1 , reg0
		8'd3:	instr <= {4'b1100,3'b000,3'b000,6'b111101};